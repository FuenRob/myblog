{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/crud-de-usuarios-en-nodejs-parte-1/","result":{"data":{"markdownRemark":{"html":"<p>En este conjunto de publicaciones, voy a mostraros cómo haría yo el CRUD (Create, Read, Update y Delete), en otras palabras, todo el flujo y acciones posibles para la entidad de Usuario en nuestro servidor de NodeJS. Todas estas acciones se ejecutarán mediante API Rest, con lo cual te recomiendo tener a mano el programa de <a href=\"https://www.postman.com/\" target=\"_blank\" rel=\"nofollow\">Postman</a> para poder hacer las llamadas a las apis. Bueno, vamos manos a la obra.</p>\n<p>Primero tenemos que instalar <a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"nofollow\">node.js</a>, para ello vamos a su web oficial en la cual encontraras los ejecutables o comandos para instalarlo según el SO que tengas. Cuando acabe la instalación, si abres el terminal de tu equipo y ejecutas el siguiente comando, podrás ver la versión de Node que tienes instalada en tu máquina.</p>\n<pre><code>    $ npm -v\n</code></pre>\n<p>Una vez confirmes que node se ha instalado correctamente, vamos a crear una carpeta para alojar todo el código del proyecto, por ejemplo rest-server, y dentro de la carpeta ejecutaremos:</p>\n<pre><code>    $ npm init\n</code></pre>\n<p>Esto nos generará el fichero package.json, encargado de gestionar las dependencias de nuestro proyecto. Este fichero también contiene información del autor, nombre y descripción del proyecto. </p>\n<p>A continuación vamos a crear el fichero server.js, que será el fichero encargado de levantar nuestro servidor express, pero antes debemos crear una carpeta llamada server y dentro de ella creamos el server.js. </p>\n<p>Después ejecutamos el comando para instalar express en nuestro proyecto, le añadimos --save para que guarde la dependencia en nuestro package.json, y así siempre que ejecutemos el <em>npm install</em> nos instalará esa dependencia:</p>\n<pre><code>    $ npm install express --save\n</code></pre>\n<p>Ahora toca picar código en nuestro fichero server.js, que deberá contener lo siguiente:</p>\n<pre><code class=\"language-javascript\">    const express = require('express');\n\n    const app = express();\n\n    app.listen(3000, () => {\n        console.log(`Escuchando en el puerto 3000`);\n    });\n</code></pre>\n<p>Ahora si nos colocamos en la raíz de nuestro proyecto y ejecutamos, desde nuestra terminal, el comando:</p>\n<pre><code>    $ node server/server.js\n</code></pre>\n<p>Veremos que aparece el siguiente mensaje en nuestra terminal: <em>Escuchando en el puerto 3000</em>. Esto quiere decir que nuestro servidor de NodeJS está levantado.</p>","frontmatter":{"title":"CRUD de usuarios en NodeJS: Parte 1","date":"2020-05-02","cover":null},"fields":{"slug":"/blog/crud-de-usuarios-en-nodejs-parte-1/"}},"site":{"siteMetadata":{"comments":{"GATSBY_DISQUS_NAME":"fuenrob"}}}},"pageContext":{"slug":"/blog/crud-de-usuarios-en-nodejs-parte-1/"}}}