{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/crud-de-usuarios-en-nodejs-parte-2/","result":{"data":{"markdownRemark":{"html":"<p>Ahora toca ponerse con la base de datos, para ello vamos a usar <a href=\"https://www.mongodb.com/cloud/atlas\" target=\"_blank\" rel=\"nofollow\">MongoDB</a>. En mi caso utilizo el servicio de cloud y creo que para este proyecto es lo más rápido. Si lo prefieres ejecutar de manera local, <a href=\"https://docs.mongodb.com/manual/administration/install-community/\" target=\"_blank\" rel=\"nofollow\">aquí</a> tienes la documentación para instalar y usar según tu SO.</p>\n<p>Una vez hayamos configurado todo y tengamos nuestro servicio de MongoDB operativo, vamos a la carpeta de nuestro proyecto, tal y como lo habíamos llamado es rest-server y ejecutamos el siguiente comando en nuestra terminal.</p>\n<pre><code>    $ npm install mongoose --save\n</code></pre>\n<p>Cuando se haya completado la instalación de mongoose vamos a editar el código de nuestro fichero server.js, que está dentro de la carpeta server, añadiendo lo siguiente:</p>\n<pre><code class=\"language-javascript\">    const mongoose = require('mongoose');\n    const run = async () => {\n        await mongoose.connect(SERVER_BBDD, {\n            useNewUrlParser: true,\n            useUnifiedTopology: true,\n            useCreateIndex: true,\n        });\n    };\n\n    run().catch(error => console.error(error));\n</code></pre>\n<p>Debes cambiar el <strong>SERVER_BBDD</strong> por tu servidor. Si es local, será algo así <em>mongodb://localhost:27017/usuarios</em>, <strong>usuarios</strong> es el nombre de la base de datos que vamos a usar. Si no está creada, se creará automáticamente. En caso de ser en cloud será algo así: <em>mongodb+srv://FuenRob:<password>@cluster0-nixve.mongodb.net/usuarios?retryWrites=true&#x26;w=majority</em></p>\n<p>Una vez hayamos añadido este código a nuestro fichero server.js, quedará así:</p>\n<pre><code class=\"language-javascript\">    const express = require('express');\n    const mongoose = require('mongoose');\n\n    const run = async () => {\n        await mongoose.connect(SERVER_BBDD, {\n            useNewUrlParser: true,\n            useUnifiedTopology: true,\n            useCreateIndex: true,\n        });\n    };\n\n    run().catch(error => console.error(error));\n\n    app.listen(process.env.PORT, () => {\n         console.log(`Escuchando en el puerto 3000`);\n    });\n</code></pre>\n<p>Si vamos a nuestra terminal y lanzamos en la raíz de nuestro proyecto el comando para levantar el servidor:</p>\n<pre><code>    $ node server/server.js\n</code></pre>\n<p>Veremos en nuestro terminal que, en caso de que no haya sucedido ningún error y de que nos hayamos conectado correctamente a nuestro servidor de base de datos, volveremos a recibir el mensaje de <em>Escuchando en el puerto 3000</em>. </p>\n<p>En caso de que tengamos algún problema para conectar con el servidor de base de datos, esta línea de código nos mostrará en nuestro terminal cuál es el error <em>run().catch(error => console.error(error))</em>.</p>","frontmatter":{"title":"CRUD de usuarios en NodeJS: Parte 2","date":"2020-05-09","cover":null},"fields":{"slug":"/blog/crud-de-usuarios-en-nodejs-parte-2/"}},"site":{"siteMetadata":{"comments":{"GATSBY_DISQUS_NAME":"fuenrob.disqus.com"}}}},"pageContext":{"slug":"/blog/crud-de-usuarios-en-nodejs-parte-2/"}}}