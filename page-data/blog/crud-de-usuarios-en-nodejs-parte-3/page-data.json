{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/crud-de-usuarios-en-nodejs-parte-3/","result":{"data":{"markdownRemark":{"html":"<p>Ahora que ya tenemos el servidor de Node levantado y la base de datos en MongoDB operativa, hay que diseñar la entidad de usuario y sus acciones. Para ello vamos a empezar por crear el modelo, pero antes vamos a añadir extensiones que necesitaremos más adelante, empezando por <em>mongoose-unique-validator</em>, que agrega validación previa al guardado para campos únicos dentro de un esquema Mongoose:</p>\n<pre><code>   $ npm install --save mongoose-unique-validator\n</code></pre>\n<p>Vamos a instalar también la extensión <em>bcrypt</em>, con ella vamos a cifrar la contraseña para \"hashearla\". Esto quiere decir que vamos a usar contraseñas con un método de cifrado del tipo hash.</p>\n<pre><code>   $ npm install --save bcrypt\n</code></pre>\n<p>Otra librería que nos vendrá muy bien para recuperar los campos de un formulario para actualizar nuestro usuario será <em>underscore</em> y para instalarla lanzamos:</p>\n<pre><code>   $ npm install --save underscore\n</code></pre>\n<p>Para acabar, vamos a añadir la librería <em>body-parser</em> que nos permitirá coger cualquier dato (de usuario, paginación, limite para mostrar. etc) que enviemos al servidor al consumir los servicios API Rest, directamente desde el objeto body dentro de req, así <strong>req.body.foo</strong>. A parte, podemos añadir validaciones de tipo de dato de una manera sencilla. Por ejemplo: <strong>req.body.foo.toString()</strong></p>\n<pre><code>   $ npm install --save body-parser\n</code></pre>\n<p>Cuando hayamos terminado de instalar las librerías, creamos una carpeta nueva llamada <strong>models</strong> dentro de la carpeta <strong>server</strong>:</p>\n<pre><code>   $ mkdir server/models\n</code></pre>\n<p>Dentro de la carpeta creamos un fichero llamado User.js, este fichero contendrá el esquema de nuestra entidad usuario y será el encargado de crear este esquema en la base de datos:</p>\n<pre><code class=\"language-javascript\">    const mongoose = require('mongoose');\n    const uniqueValidator = require('mongoose-unique-validator');\n\n    let Schema = mongoose.Schema;\n\n    let userSchema = new Schema({\n        name: {\n            type: String,\n            required: [true, 'El nombre es requerido']\n        },\n        email:{\n            type: String,\n            unique: true,\n            required: [true, 'El correo electrónico es requerido']\n        },\n        password: {\n            type: String,\n            required: [true, 'La contraseña es requerido']\n        },\n        img: {\n            type: String,\n            required: false\n        },\n        status: {\n            type: Boolean,\n            default: true\n        }\n    });\n\n    userSchema.methods.toJSON = function(){\n        let user = this;\n        let userObject = user.toObject();\n        delete userObject.password;\n        return userObject;\n    }\n\n    userSchema.plugin(uniqueValidator, {\n        message: '{PATH} debe de ser único'\n    });\n\n    module.exports = mongoose.model('User', userSchema);\n</code></pre>\n<p>Una vez hayamos creado el modelo volemos a crear una carpeta nueva llamada <strong>routes</strong>, dentro de <strong>server</strong> y al mismo nivel que models.</p>\n<pre><code>   $ mkdir server/routes\n</code></pre>\n<p>Dentro de ella vamos a crear un fichero llamado <strong>users.js</strong>, y será el fichero que contendrá las acciones que se pueden hacer sobre nuestros usuarios. Es el fichero que contiene las acciones del CRUD. Los servicios serán del tipo: </p>\n<ul>\n<li>POST para crear.</li>\n<li>PUT para editar.</li>\n<li>GET para listar.</li>\n<li>DELETE para borrar o desactivar un usuario.</li>\n</ul>\n<p>Este fichero user.js contiene lo siguiente:</p>\n<pre><code class=\"language-javascript\">    const express = require('express');\n    const bcrypt = require('bcrypt');\n    const _ = require('underscore');\n    const User = require('../models/User');\n    const app = express();\n\n    // Listado de usuarios\n    app.get('/usuario', (req, res) => {\n\n        let from = req.query.from || 0;\n        from = Number(from);\n\n        let limit = req.query.limit || 5;\n        limit = Number(limit);\n\n        let conditions = {\n            status: true\n        }\n\n        User.find(conditions, 'name email status')\n            .skip(from)\n            .limit(limit)\n            .exec((err, users) => {\n            if(err){\n                return res.status(400).json({\n                ok: false,\n                err  \n                });\n            }\n        \n            User.countDocuments(conditions,(err, sumUsers) => {\n                res.json({\n                    ok: true,\n                    users,\n                    sumUsers\n                });\n            });\n        });\n    });\n\n    // Crear usuario\n    app.post('/usuario', (req, res) => {\n        let body = req.body;\n\n        let user = new User({\n            name: body.name,\n            email: body.email,\n            password: bcrypt.hashSync(body.password, 10)\n        });\n\n        user.save((err, userDB) => {\n            if(err){\n                return res.status(400).json({\n                ok: false,\n                err  \n                });\n            }\n\n            res.json({\n                ok: true,\n                usuario: userDB\n            });\n        });\n    });\n\n    // Actualizar usuario\n    app.put('/usuario/:id', (req, res) => {\n        let id = req.params.id;\n        let body = _.pick(req.body, ['name', 'email', 'img', 'status']);\n\n        User.findByIdAndUpdate(id, body, {new: true, runValidators: true}, (err, userBD) => {\n            if(err){\n                return res.status(400).json({\n                ok: false,\n                err  \n                });\n            }\n\n            res.json({\n                ok: true,\n                usuario: userBD\n            });\n        });\n    });\n\n    // Eliminar/Desactivar usuario\n    app.delete('/usuario/:id', (req, res) => {\n        let id = req.params.id;\n        User.findByIdAndUpdate(id, {status: false}, {new: true}, (err, userBD) => {\n            if(err){\n                return res.status(400).json({\n                ok: false,\n                err  \n                });\n            }\n\n            if(!userBD){\n                return res.status(400).json({\n                    ok: false,\n                    err:{\n                        message: 'Usuario no encontrado'\n                    } \n                });\n            }\n            \n            res.json({\n                ok: true,\n                userBD\n            });\n        });\n    });\n\n    module.exports = app;\n</code></pre>\n<p>En mi caso, no quiero eliminar ningún usuario, así que el DELETE es para desactivar cambiando el estado del usuario por false.\nAhora, para poder usar este controlador que tiene las funciones de nuestro CRUD, hay que importarlo en nuestro fichero server.js con la siguiente línea de código:</p>\n<pre><code class=\"language-javascript\">    app.use(require('./routes/users'));\n</code></pre>\n<p>Además hay que importar la librería que hemos instalado antes, llamada body-parser, que nos permitirá acceder a los datos de una manera más sencilla:</p>\n<pre><code class=\"language-javascript\">    const bodyParser = require('body-parser');\n</code></pre>\n<p>De este modo, nuestro fichero server.js quedará así:</p>\n<pre><code class=\"language-javascript\">    const express = require('express');\n    const mongoose = require('mongoose');\n    const bodyParser = require('body-parser');\n\n    // Parse application/x-www-form-urlencoded\n    app.use(bodyParser.urlencoded({ extended: false }));\n    // Parse application/json\n    app.use(bodyParser.json());\n    // Include controller of the entity\n    app.use(require('./routes/users'));\n\n    const run = async () => {\n        await mongoose.connect(SERVER_BBDD, {\n            useNewUrlParser: true,\n            useUnifiedTopology: true,\n            useCreateIndex: true,\n        });\n    };\n\n    run().catch(error => console.error(error));\n\n    app.listen(process.env.PORT, () => {\n         console.log(`Escuchando en el puerto 3000`);\n    });\n</code></pre>\n<p>Una vez tengamos nuestro servidor levantado, podemos hacer las peticiones para crear, editar, desactivar o listar los usuarios registrados en nuestra base de datos de mangodb. En mi caso, uso Postman y <a href=\"https://documenter.getpostman.com/view/3846138/SWTK3YsQ?version=latest#5671a6c7-0fc3-4aa4-9aeb-0487ea862ca1\" target=\"_blank\" rel=\"nofollow\">aquí</a> puedes encontrar una breve documentación de los comandos que uso para ejecutar las apis que acabamos de hacer. Esto es lo básico funcional para tener un CRUD completo de usuarios.</p>","frontmatter":{"title":"CRUD de usuarios en NodeJS: Parte 3","date":"2020-05-16","cover":null},"fields":{"slug":"/blog/crud-de-usuarios-en-nodejs-parte-3/"}},"site":{"siteMetadata":{"comments":{"GATSBY_DISQUS_NAME":"fuenrob.disqus.com"}}}},"pageContext":{"slug":"/blog/crud-de-usuarios-en-nodejs-parte-3/"}}}