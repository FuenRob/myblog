{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/desarrollar-una-pagina-de-configuracion-para-un-plugin-de-wordpress/","result":{"data":{"markdownRemark":{"html":"<p>El primer paso es escoger el nombre de nuestro plugin y ese será el nombre de la carpeta y del fichero de instalación de nuestro plugin. Es este caso vamos a llamarlo <em>fuenrob</em> y podremos crear la carpeta y el fichero ejecutando los siguientes comandos dentro de nuestra carpeta de plugins de wordpress:</p>\n<pre><code>mkdir fuenrob\ncd fuenrob\ntouch fuenrob.php\n</code></pre>\n<p>Ahora, vamos a editar el fichero <em>fuenrob.php</em> y lo mínimo que debemos añadirle para que nuestro wordpress considere a ese fichero php como un plugin son los siguientes comentarios:</p>\n<pre><code class=\"language-php\">/**\nPlugin Name: [Nombre del Plugin]\nPlugin URI: [Enlace a web con información sobre plugin]\nDescription: [Informar de que hace nuestro plugin]\nVersion: [La versión del plugin]\nAuthor: [¿Quién ha desarrollado el plugin?]\nAuthor URI: [La página web del autor]\nLicense: [Que tipo de licencia de uso tiene tu plugin]\n*/\n</code></pre>\n<p>Tan solo con esto conseguimos que nuestro wordpress entienda que ese fichero php sirve para instalar un plugin, pero claro, nadie quiere instalar un plugin que no haga nada, así que, vamos a añadir campos a nuestra tabla en options en el momento de la activación del plugin. Para ello, a nuestro fuenrob.php, vamos a añadirle lo siguiente:</p>\n<pre><code class=\"language-php\">function fuenrob_activate()\n{\n    /**\n     * Si quieres añadir datos a la tabla de options \n     * la sintaxis de add_option es la siguiente: \n     * add_option($nombre,$valor,'',$carga_automatica)\n     */\n    add_option('nombrePersona','Roberto','','yes');\n}\n/**\n * Con esta función estamos pidiendo a wordpress que ejecute\n * la función activate cuando se active el plugin.\n */\nregister_activation_hook(__FILE__,'fuenrob_activate');\n</code></pre>\n<p>Añadiendo esto al fichero ya hacemos que al activar el modulo se agregue un nuevo valor a la tabla options, pero igual que lo añadimos, lo ideal es que lo eliminemos cuando lo desactivamos y para ello hay que añadir esto:</p>\n<pre><code class=\"language-php\">function fuenrob_desactivate()\n{\n    /**\n     * A la función delete_option solo hay que pasarle el nombre\n     * de la opción que habíamos añadido. \n     */\n    delete_option('nombrePersona');\n}\n/**\n * Tal y como hicimos al activar, llamamos a la acción de \n * wordpress que desactiva el módulo y le pedimos que ejecute\n * nuestra función.\n */\nregister_deactivation_hook(__FILE__,'fuenrob_desactivate');\n</code></pre>\n<p>De este modo nuestro fichero ya ejecuta el añadido y eliminación de un valor nuevo en la tabla de options de nuestro wordpress.\nAhora vamos a añadir una página de configuración que nos permita editar ese valor desde el escritorio de wordpress y para ello primero debemos crear una carpeta admin y un fichero al que podemos llamar como queramos, en mi caso lo llamaré <em>configurations.php</em>:</p>\n<pre><code>mkdir admin\ncd admin/\ntouch configurations.php\n</code></pre>\n<p>Este fichero tendrá una clase y en ella vamos a configurar toda la página de administración de la información que vamos añadir y editar de nuestro campo nuevo nombrePersona:</p>\n<pre><code class=\"language-php\">class FuenRobSettingsPage\n{\n    // Contiene los valores que se utilizarán en los campos de devolución de llamada\n    private $options;\n\n    \n    /**\n     * Lo que ejecutamos al instanciar la clase:\n     * admin_menu agrega una opción nueva al menú. Los detalles de esa \n     * nueva opción están en la function add_plugin_page\n     * admin_init indica el contenido de la página de configuración.\n     */\n    public function __construct()\n    {\n        add_action( 'admin_menu', array( $this, 'add_plugin_page' ) );\n        add_action( 'admin_init', array( $this, 'page_init' ) );\n    }\n\n    /**\n     * Función que añade la opciones del menú, en este caso como un sub menú de ajustes.\n     */\n    public function add_plugin_page()\n    {\n        // This page will be under \"Settings\"\n        add_options_page(\n            'Settings Admin', \n            'Custom Settings', \n            'manage_options', \n            'fuenrob-setting-admin', \n            array( $this, 'create_admin_page' )\n        );\n    }\n\n    /**\n     * Controlador de la página de configuración a la que llama la opción del menú.\n     */\n    public function create_admin_page()\n    {\n        // Set class property\n        $this->options = get_option( 'nombrePersona' );\n        ?>\n        &#x3C;div class=\"wrap\">\n            &#x3C;h1>My Settings&#x3C;/h1>\n            &#x3C;form method=\"post\" action=\"options.php\">\n            &#x3C;?php\n                // This prints out all hidden setting fields\n                settings_fields( 'my_option_group' );\n                do_settings_sections( 'fuenrob-setting-admin' );\n                submit_button();\n            ?>\n            &#x3C;/form>\n        &#x3C;/div>\n        &#x3C;?php\n    }\n\n    /**\n     * Indica la sección que tendrá la página de configuración\n     */\n    public function page_init()\n    {        \n        register_setting(\n            'my_option_group', // Grupo de opciones\n            'nombrePersona', // Nombre de la opción que queremos editar\n            array( $this, 'sanitize' ) // Función que depura la información\n        );\n\n        add_settings_section(\n            'fuenrob-setting_section_id', // ID de la sección\n            'My Custom Settings', // Título de la página\n            array( $this, 'print_section_info' ), // Función que añade un texto explicativo\n            'fuenrob-setting-admin' // Nombre de la página\n        );\n\n        add_settings_field(\n            'nombrePersona', // Nombre de campo en base de datos\n            'Nombre de persona', // Label del formulario\n            array( $this, 'nombrePersona_callback' ), // Función que muestra el input\n            'fuenrob-setting-admin', // Nombre de la página en la que se muestra\n            'fuenrob-setting_section_id' // ID de la sección en la que se muestra\n        );      \n    }\n\n    /**\n     * Debuguear el dato es necesario.\n     *\n     * @param array $input Contiene todos los campos de configuración como claves de matriz\n     */\n    public function sanitize( $input )\n    {\n        $new_input = array();\n\n        if( isset( $input['nombrePersona'] ) )\n            $new_input['nombrePersona'] = sanitize_text_field( $input['nombrePersona'] );\n\n        return $new_input;\n    }\n\n    /** \n     * Función para añadir información a la página\n     */\n    public function print_section_info()\n    {\n        print 'Enter your settings below:';\n    }\n\n    /** \n     * Función para mostrar en input con la información de base de datos\n     */\n    public function nombrePersona_callback()\n    {\n        printf(\n            '&#x3C;input type=\"text\" id=\"nombrePersona\" name=\"nombrePersona[nombrePersona]\" value=\"%s\" />',\n            isset( $this->options['nombrePersona'] ) ? esc_attr( $this->options['nombrePersona']) : ''\n        );\n    }\n}\n\nif( is_admin() )\n    $fuenrob_my_settings_page = new FuenRobSettingsPage();\n</code></pre>\n<p>Una vez hayamos completado esta clase, debemos importar el fichero en nuestro fuenrob.php que es el fichero que se ejecutará al instalar el plugin. Vale con añadir después de los comentarios la siguiente línea:</p>\n<pre><code class=\"language-php\">include(plugin_dir_path(__FILE__) . 'admin/configurations.php');\n</code></pre>\n<p>Con esto ya tenemos un plugin de wordpress con su página de configuración para poder editar los datos adicionales que queremos añadir a nuestra base de datos.\nSi en algún momento queremos consultar ese dato para mostrarlo en el frontend vale con ejecutar la siguiente función:</p>\n<pre><code class=\"language-php\">// get_option($nombre)\nget_option( 'nombrePersona' )\n</code></pre>","frontmatter":{"title":"Desarrollar una página de configuración para un plugin de wordpress","date":"2020-06-13","cover":null},"fields":{"slug":"/blog/desarrollar-una-pagina-de-configuracion-para-un-plugin-de-wordpress/"}},"site":{"siteMetadata":{"comments":{"GATSBY_DISQUS_NAME":"fuenrob"}}}},"pageContext":{"slug":"/blog/desarrollar-una-pagina-de-configuracion-para-un-plugin-de-wordpress/"}},"staticQueryHashes":["414621567","754622331"]}