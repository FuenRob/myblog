{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/que-es-deployer-y-como-usarlo/","result":{"data":{"markdownRemark":{"html":"<p>Si eres un programador de PHP es posible que ya hayas oído hablar de deployer. Muchos programadores, y me incluyo, lo usamos para desplegar actualizaciones de código en los entornos, ya sea de desarrollo o producción, desde nuestro equipo local. Esto quiere decir que no entramos al servidor para lanzar el comando git pull en el entorno que sea necesario, si no que deployer ya lo hará por nosotros.</p>\n<p>Usar esta herramienta nos permite llevar un control de versiones operativas, lo que quiere decir que si por un despiste desplegamos una nueva versión de una web que contiene errores graves y que nos llevarán tiempo corregir, podemos retornar a una versión anterior con facilidad.</p>\n<p>Ahora vamos a empezar, lo primero es instalar deployer en tu equipo y para ello debes seguir los pasos que se indican en su propia <a href=\"https://deployer.org/docs/getting-started.html\" target=\"_blank\" rel=\"nofollow\">web</a> y son lanzar los siguientes comandos:</p>\n<pre><code>curl -LO https://deployer.org/deployer.phar\nmv deployer.phar /usr/local/bin/dep\nchmod +x /usr/local/bin/dep\n</code></pre>\n<p>Una vez lo tengas instalado, vamos al repositorio del proyecto y ejecutamos el siguiente comando:</p>\n<pre><code>dep init\n</code></pre>\n<p>Este comando inicia la creación del fichero deploy.php. Para ello nos irá preguntando qué framework usamos, cómo se llama nuestro proyecto, qué repositorio usamos y más información. Al terminar el proceso quedará un fichero parecido con un contenido parecido a este:</p>\n<pre><code>&#x3C;?php\n/**\n * Cargamos la funcionalidad de Deployer\n */\nnamespace Deployer;\nrequire 'recipe/common.php'; // Tipo de Framerwork que ejecutamos\n/**\n * Variables globales\n */\nset('project_name', 'FuenRob'); // Indicamos el nombre del proyecto\nset('keep_releases', 5); // Número de releases que queremos guardar\nset('repository', 'git@github.com:USERGIT/myRepo.git'); // Repositorio de git\nset('shared_dirs', ['img', 'uploads']); // Directorios que se comparten entre releases\nset('shared_files', ['.htaccess']); // Directorios que se comparten entre releases\nset('writable_dirs', []);\n\n// Datos del servidor en el que vamos a desplegar\nhost('develop')\n    ->hostname('fuenrob.des.com') // Nombre del servidor que usamos para conectar por SSH\n    ->set('branch', 'develop') // Rama de GIT a desplegar\n    ->user('www-data') // Usuario de conexión SSH\n    ->port(21) // Puerto de conexión SSH\n    ->configFile('~/.ssh/config') // Fichero de configuración de SSH\n    ->identityFile('~/.ssh/id_rsa') // Fichero que contiene la clave de SSH que sirve para verificar el acceso del usuario\n    ->set('deploy_path', '/var/www/html/fuenrob.com/') // En qué directorio tenemos el proyecto\n    ->set('default_timeout', 10000); // Tiempo máximo de ejecución\n\n// Tareas que ejecutará el deploy\n/* DEPLOY TASK GROUP */\ndesc('Comienza el despliegue');\ntask('deploy:dev', // Nombre de la tarea\n    [\n        'deploy:prepare', // Se inicia el deploy\n        'deploy:lock', // Se bloquea el deploy, y no permite que se pueda lanzar de nuevo.\n        'deploy:release', // Se comprueba que release está usando y cuál debe crear\n        'deploy:update_code', // Hace un pull de la rama que le hemos indicado en la release correspondiente\n        'deploy:shared', // Se crean los enlaces simbólicos de las carpetas y ficheros compartidos entre releases\n        'deploy:symlink', // Cambia el enlace simbólico de la carpeta current a la nueva release\n        'deploy:unlock', // Desbloquea el deploy\n        'cleanup', // Se eliminan las releases antiguas hasta que queden solo las indicadas anteriormente\n        'success' // Muestra un mensaje de proceso completado\n    ]\n)->desc('Deploy {{project_name}}');\n</code></pre>\n<p>Para finalizar, si queremos ejecutar el deploy únicamente debemos lanzar en la ruta en la que está el fichero el siguiente comando:</p>\n<pre><code>dep deploy:dev develop\n</code></pre>\n<p>En caso de que quieras obtener más información de las acciones que ejecuta el deploy lanza el comando anterior añadiéndole al final -vvv</p>\n<p>En caso de que quieras crear tus propias tareas puedes hacerlo así:</p>\n<pre><code>desc('My task');\ntask('my_task', function () {\n    run('git pull'); // Comando que queramos lanzar\n});\n</code></pre>\n<p>Esta nueva tarea la podemos añadir en el listado de acciones que se realizan al ejecutar la tarea deploy:dev o usar las funciones de hooks del propio deploy:</p>\n<pre><code>before('deploy:prepare', 'my_task')\nafter('deploy:prepare', 'my_task')\n</code></pre>\n<p>Primer valor indica una función que ejecute el deploy y el segundo valor. Para más información yo recomiendo ir a la página oficial de deployer <a href=\"https://deployer.org/docs/tasks.html\" target=\"_blank\" rel=\"nofollow\">aquí</a></p>","frontmatter":{"title":"Qué es deployer y cómo usarlo","date":"2020-06-21","cover":null},"fields":{"slug":"/blog/que-es-deployer-y-como-usarlo/"}},"site":{"siteMetadata":{"comments":{"GATSBY_DISQUS_NAME":"fuenrob"}}}},"pageContext":{"slug":"/blog/que-es-deployer-y-como-usarlo/"}},"staticQueryHashes":["414621567","754622331"]}